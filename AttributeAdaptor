using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.OleDb;
using DevExpress.Utils;
using DevExpress.XtraMap;

namespace Seoul2
{
    public partial class Form1 : Form {
        const string bingKey = "YOUR_BING_MAPS_KEY_HERE";
        const string xmlFilepath = @"..\..\Data\Ships.xml";
        const string imageFilepath = @"..\..\Image\Ship.png";

        public Form1()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the ExcelDataSource asynchronously
            excelDataSource1.FillAsync();
        }

        #region #CreateAdapter
        // Creates an adapter for the map's vector layer.
        private IMapDataAdapter CreateAdapter(object source)
        {
            ListSourceDataAdapter adapter = new ListSourceDataAdapter();

            adapter.DataSource = source;

            adapter.Mappings.Latitude = "Latitude";
            adapter.Mappings.Longitude = "Longitude";

            adapter.AttributeMappings.Add(new MapItemAttributeMapping() { Member = "Name", Name = "Name" });
            adapter.AttributeMappings.Add(new MapItemAttributeMapping() { Member = "Year", Name = "Year" });
            adapter.AttributeMappings.Add(new MapItemAttributeMapping() { Member = "Description", Name = "Description" });

            return adapter;
        }
        #endregion #CreateAdapter

        #region #LoadData
        // Loads data from a XML file.
        private List<ShipwreckData> LoadData(string path)
        {
            return excelDataSource1.(path).Element("Ships").Elements("Ship")
                .Select(e => new ShipwreckData(
                    year: Convert.ToInt32(e.Element("Year").Value, CultureInfo.InvariantCulture),
                    name: e.Element("Name").Value,
                    description: e.Element("Description").Value,
                    latitude: Convert.ToDouble(e.Element("Latitude").Value, CultureInfo.InvariantCulture),
                    longitude: Convert.ToDouble(e.Element("Longitude").Value, CultureInfo.InvariantCulture)
                ))
                .ToList();
        }

        public class ShipwreckData
        {
            public int Year { get; }
            public string Name { get; }
            public string Description { get; }
            public double Latitude { get; }
            public double Longitude { get; }

            public ShipwreckData(int year, string name, string description, double latitude, double longitude)
            {
                this.Year = year;
                this.Name = name;
                this.Description = description;
                this.Latitude = latitude;
                this.Longitude = longitude;
            }
        }
        #endregion #LoadData

        #region #LoadImage
        // Loads an image to an image collection.
        private ImageCollection LoadImage(string path)
        {
            ImageCollection imageCollection = new ImageCollection();
            Bitmap image = new Bitmap(path);
            imageCollection.ImageSize = new Size(50, 50);
            imageCollection.Images.Add(image);
            return imageCollection;
        }
        #endregion #LoadImage

        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void excelBindingSource_CurrentChanged(object sender, EventArgs e)
        {

        }

        private void mapControl1_Click(object sender, EventArgs e)
        {

        }
    }
}
